// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Js_dict from "../../node_modules/bs-platform/lib/es6/js_dict.js";
import SidebarModuleCss from "./Sidebar.module.css";

var styles = SidebarModuleCss;

function Sidebar$Range(Props) {
  var label = Props.label;
  var name = Props.name;
  var min = Props.min;
  var max = Props.max;
  var value = Props.value;
  var onChange = Props.onChange;
  var updateValue = function (e) {
    return onChange(e.target.value);
  };
  return React.createElement("div", {
              className: styles.option
            }, React.createElement("input", {
                  id: name,
                  max: max,
                  min: min,
                  name: name,
                  type: "range",
                  value: value,
                  onChange: updateValue
                }), React.createElement("label", {
                  htmlFor: name
                }, label));
}

var $$Range = {
  make: Sidebar$Range
};

function Sidebar$ColorPicker(Props) {
  var label = Props.label;
  var name = Props.name;
  var value = Props.value;
  var onChange = Props.onChange;
  var updateValue = function (e) {
    return onChange(e.target.value);
  };
  return React.createElement("div", {
              className: styles.option
            }, React.createElement("input", {
                  id: name,
                  name: name,
                  type: "color",
                  value: value,
                  onChange: updateValue
                }), React.createElement("label", {
                  htmlFor: name
                }, label));
}

var ColorPicker = {
  make: Sidebar$ColorPicker
};

function Sidebar(Props) {
  var root = React.useRef(document.documentElement);
  var match = React.useState(function () {
        return {};
      });
  var setButtonStyles = match[1];
  var buttonStyles = match[0];
  var getSufixFromKey = function (key) {
    if (key !== "color" && key !== "background") {
      return "px";
    } else {
      return "";
    }
  };
  var getOr = function (key, defaultValueOpt, param) {
    var defaultValue = defaultValueOpt !== undefined ? defaultValueOpt : "0";
    var value = Js_dict.get(buttonStyles, key);
    if (value !== undefined) {
      return value;
    } else {
      return defaultValue;
    }
  };
  React.useEffect((function () {
          var keys = Object.keys(buttonStyles);
          keys.forEach(function (key) {
                return root.current.style.setProperty("--" + key, buttonStyles[key] + getSufixFromKey(key));
              });
          
        }), [buttonStyles]);
  var onChange = function (stateKey) {
    return function (value) {
      buttonStyles[stateKey] = value;
      return setButtonStyles(function (param) {
                  return Js_dict.fromArray(Js_dict.entries(buttonStyles));
                });
    };
  };
  return React.createElement("section", {
              className: styles.sidebar
            }, React.createElement(Sidebar$Range, {
                  label: "Padding",
                  name: "padding",
                  min: "0",
                  max: "100",
                  value: getOr("padding", undefined, undefined),
                  onChange: onChange("padding")
                }), React.createElement(Sidebar$Range, {
                  label: "Margin",
                  name: "margin",
                  min: "0",
                  max: "100",
                  value: getOr("margin", undefined, undefined),
                  onChange: onChange("margin")
                }), React.createElement(Sidebar$Range, {
                  label: "Font size",
                  name: "fontSize",
                  min: "0",
                  max: "100",
                  value: getOr("font-size", undefined, undefined),
                  onChange: onChange("font-size")
                }), React.createElement(Sidebar$Range, {
                  label: "Border radius",
                  name: "radius",
                  min: "0",
                  max: "100",
                  value: getOr("border-radius", undefined, undefined),
                  onChange: onChange("border-radius")
                }), React.createElement(Sidebar$ColorPicker, {
                  label: "Color",
                  name: "color",
                  value: getOr("color", "#000000", undefined),
                  onChange: onChange("color")
                }), React.createElement(Sidebar$ColorPicker, {
                  label: "Background",
                  name: "background",
                  value: getOr("background", "#ffffff", undefined),
                  onChange: onChange("background")
                }));
}

var make = Sidebar;

export {
  styles ,
  $$Range ,
  ColorPicker ,
  make ,
  
}
/* styles Not a pure module */
